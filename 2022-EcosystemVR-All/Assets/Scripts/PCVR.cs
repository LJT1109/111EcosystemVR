//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/InputSet.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSet : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSet()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSet"",
    ""maps"": [
        {
            ""name"": ""PCVR"",
            ""id"": ""b624131b-b66a-412e-aca2-84f506424238"",
            ""actions"": [
                {
                    ""name"": ""MouseSys"",
                    ""type"": ""Value"",
                    ""id"": ""ceff3986-4939-4b92-9639-00881be19e31"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""585bbdea-6c42-45b7-85e8-5cbceec19b61"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""986eb6d5-d547-44ce-bf3c-b5d53955ab3f"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fa7e3556-8e24-47b3-a663-193a0a8eca07"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""231b99da-7eb4-48b1-b038-66b99a0be978"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e59b57ac-6ed5-4dd2-b355-909759974348"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PCVR
        m_PCVR = asset.FindActionMap("PCVR", throwIfNotFound: true);
        m_PCVR_MouseSys = m_PCVR.FindAction("MouseSys", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PCVR
    private readonly InputActionMap m_PCVR;
    private IPCVRActions m_PCVRActionsCallbackInterface;
    private readonly InputAction m_PCVR_MouseSys;
    public struct PCVRActions
    {
        private @InputSet m_Wrapper;
        public PCVRActions(@InputSet wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseSys => m_Wrapper.m_PCVR_MouseSys;
        public InputActionMap Get() { return m_Wrapper.m_PCVR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCVRActions set) { return set.Get(); }
        public void SetCallbacks(IPCVRActions instance)
        {
            if (m_Wrapper.m_PCVRActionsCallbackInterface != null)
            {
                @MouseSys.started -= m_Wrapper.m_PCVRActionsCallbackInterface.OnMouseSys;
                @MouseSys.performed -= m_Wrapper.m_PCVRActionsCallbackInterface.OnMouseSys;
                @MouseSys.canceled -= m_Wrapper.m_PCVRActionsCallbackInterface.OnMouseSys;
            }
            m_Wrapper.m_PCVRActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseSys.started += instance.OnMouseSys;
                @MouseSys.performed += instance.OnMouseSys;
                @MouseSys.canceled += instance.OnMouseSys;
            }
        }
    }
    public PCVRActions @PCVR => new PCVRActions(this);
    public interface IPCVRActions
    {
        void OnMouseSys(InputAction.CallbackContext context);
    }
}
